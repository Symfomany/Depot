<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class AlphaBetaBundleEntityVillesProxy extends \Alpha\BetaBundle\Entity\Villes implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setHabitants($habitants)
    {
        $this->__load();
        return parent::setHabitants($habitants);
    }

    public function getHabitants()
    {
        $this->__load();
        return parent::getHabitants();
    }

    public function setDensite($densite)
    {
        $this->__load();
        return parent::setDensite($densite);
    }

    public function getDensite()
    {
        $this->__load();
        return parent::getDensite();
    }

    public function setDepartement($departement)
    {
        $this->__load();
        return parent::setDepartement($departement);
    }

    public function getDepartement()
    {
        $this->__load();
        return parent::getDepartement();
    }

    public function setNomVille($nomVille)
    {
        $this->__load();
        return parent::setNomVille($nomVille);
    }

    public function getNomVille()
    {
        $this->__load();
        return parent::getNomVille();
    }

    public function setNomVilleMaj($nomVilleMaj)
    {
        $this->__load();
        return parent::setNomVilleMaj($nomVilleMaj);
    }

    public function getNomVilleMaj()
    {
        $this->__load();
        return parent::getNomVilleMaj();
    }

    public function setNomVilleUrl($nomVilleUrl)
    {
        $this->__load();
        return parent::setNomVilleUrl($nomVilleUrl);
    }

    public function getNomVilleUrl()
    {
        $this->__load();
        return parent::getNomVilleUrl();
    }

    public function setCodePostal($codePostal)
    {
        $this->__load();
        return parent::setCodePostal($codePostal);
    }

    public function getCodePostal()
    {
        $this->__load();
        return parent::getCodePostal();
    }

    public function setCodeInsee($codeInsee)
    {
        $this->__load();
        return parent::setCodeInsee($codeInsee);
    }

    public function getCodeInsee()
    {
        $this->__load();
        return parent::getCodeInsee();
    }

    public function setLatitude($latitude)
    {
        $this->__load();
        return parent::setLatitude($latitude);
    }

    public function getLatitude()
    {
        $this->__load();
        return parent::getLatitude();
    }

    public function setLongitude($longitude)
    {
        $this->__load();
        return parent::setLongitude($longitude);
    }

    public function getLongitude()
    {
        $this->__load();
        return parent::getLongitude();
    }

    public function setCoordFixed($coordFixed)
    {
        $this->__load();
        return parent::setCoordFixed($coordFixed);
    }

    public function getCoordFixed()
    {
        $this->__load();
        return parent::getCoordFixed();
    }

    public function setCpArr($cpArr)
    {
        $this->__load();
        return parent::setCpArr($cpArr);
    }

    public function getCpArr()
    {
        $this->__load();
        return parent::getCpArr();
    }

    public function setArrondissement($arrondissement)
    {
        $this->__load();
        return parent::setArrondissement($arrondissement);
    }

    public function getArrondissement()
    {
        $this->__load();
        return parent::getArrondissement();
    }

    public function setLatrad($latrad)
    {
        $this->__load();
        return parent::setLatrad($latrad);
    }

    public function getLatrad()
    {
        $this->__load();
        return parent::getLatrad();
    }

    public function setLonrad($lonrad)
    {
        $this->__load();
        return parent::setLonrad($lonrad);
    }

    public function getLonrad()
    {
        $this->__load();
        return parent::getLonrad();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'habitants', 'densite', 'departement', 'nomVille', 'nomVilleMaj', 'nomVilleUrl', 'codePostal', 'codeInsee', 'latitude', 'longitude', 'coordFixed', 'cpArr', 'arrondissement', 'latrad', 'lonrad');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}